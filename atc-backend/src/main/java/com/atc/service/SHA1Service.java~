package com.atc.service;

public class SHA1Service {

    public String hash(String text) {
        byte[] message = text.getBytes();
        int[] h = {
                0x67452301,
                0xEFCDAB89,
                0x98BADCFE,
                0x10325476,
                0xC3D2E1F0
        };

        int messageLenBytes = message.length;
        int numBlocks = ((messageLenBytes + 8) >>> 6) + 1;
        int totalLen = numBlocks * 64;
        byte[] padded = new byte[totalLen];
        System.arraycopy(message, 0, padded, 0, messageLenBytes);
        padded[messageLenBytes] = (byte) 0x80;

        long messageLenBits = (long) messageLenBytes * 8;
        for (int i = 0; i < 8; i++) {
            padded[totalLen - 1 - i] = (byte) ((messageLenBits >>> (8 * i)) & 0xFF);
        }

        int[] w = new int[80];
        for (int i = 0; i < numBlocks; i++) {
            int index = i * 64;

            for (int j = 0; j < 16; j++) {
                w[j] = ((padded[index + 4 * j] & 0xFF) << 24) |
                        ((padded[index + 4 * j + 1] & 0xFF) << 16) |
                        ((padded[index + 4 * j + 2] & 0xFF) << 8) |
                        (padded[index + 4 * j + 3] & 0xFF);
            }

            for (int j = 16; j < 80; j++) {
                w[j] = Integer.rotateLeft(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
            }

            int a = h[0];
            int b = h[1];
            int c = h[2];
            int d = h[3];
            int e = h[4];

            for (int j = 0; j < 80; j++) {
                int f, k;
                if (j < 20) {
                    f = (b & c) | ((~b) & d);
                    k = 0x5A827999;
                } else if (j < 40) {
                    f = b ^ c ^ d;
                    k = 0x6ED9EBA1;
                } else if (j < 60) {
                    f = (b & c) | (b & d) | (c & d);
                    k = 0x8F1BBCDC;
                } else {
                    f = b ^ c ^ d;
                    k = 0xCA62C1D6;
                }

                int temp = Integer.rotateLeft(a, 5) + f + e + k + w[j];
                e = d;
                d = c;
                c = Integer.rotateLeft(b, 30);
                b = a;
                a = temp;
            }

            h[0] += a;
            h[1] += b;
            h[2] += c;
            h[3] += d;
            h[4] += e;
        }

        return bytesToHex(h);
    }

    public boolean verify(String text, String hash) {
        String computedHash = hash(text);
        return computedHash.equals(hash);
    }

    private String bytesToHex(int[] hashInts) {
        StringBuilder hexString = new StringBuilder();
        for (int h : hashInts) {
            String hex = Integer.toHexString(h);
            while (hex.length() < 8) hex = "0" + hex;
            hexString.append(hex);
        }
        return hexString.toString();
    }
}
