package com.atc.test;

import java.math.BigInteger;
import java.util.Base64;
import java.util.Random;
import java.util.Scanner;

public class RSACryptography {

    // Helper: GCD using Euclidean algorithm
    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    // Generate RSA Key Pair with constant e and random valid d
    public static RSAKeyPair generateRSAKeys() {
        Random random = new Random();
        int p = 307;
        int q = 211;
        int n = p * q;
        int phi = (p - 1) * (q - 1);
        int e = 19; // Constant public exponent

        if (e >= phi || gcd(e, phi) != 1) {
            throw new IllegalArgumentException("Invalid 'e' or gcd(e, phi) != 1");
        }

        // Randomly select a valid private key d such that (d * e) % phi == 1
        int d;
        while (true) {
            d = 2 + random.nextInt(phi - 2); // Random d in range [2, phi-1)
            if ((d * e) % phi == 1) {
                break;
            }
        }

        return new RSAKeyPair(n, e, d);
    }

    // Encrypt using RSA and Base64 per character, replacing spaces with "/"
    public static String encrypt(String message, int e, int n) {
        StringBuilder encrypted = new StringBuilder();
        for (int i = 0; i < message.length(); i++) {
            char ch = message.charAt(i);
            BigInteger m = BigInteger.valueOf((int) ch);
            BigInteger c = m.modPow(BigInteger.valueOf(e), BigInteger.valueOf(n));
            String base64Char = Base64.getEncoder().encodeToString(c.toByteArray());
            encrypted.append(base64Char);
            if (i < message.length() - 1) {
                encrypted.append("/");
            }
        }
        return encrypted.toString();
    }

    // Decrypt using RSA and Base64 per character
    public static String decrypt(String base64Cipher, int d, int n) {
        StringBuilder decrypted = new StringBuilder();
        String[] parts = base64Cipher.trim().split("/");
        for (String part : parts) {
            byte[] cipherBytes = Base64.getDecoder().decode(part);
            BigInteger c = new BigInteger(1, cipherBytes);
            BigInteger m = c.modPow(BigInteger.valueOf(d), BigInteger.valueOf(n));
            decrypted.append((char) m.intValue());
        }
        return decrypted.toString();
    }

    // Main method
    public static void main(String[] args) {
        RSAKeyPair keyPair = generateRSAKeys();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Public Key (n, e): (" + keyPair.n + ", " + keyPair.e + ")");
        System.out.println("Private Key (n, d): (" + keyPair.n + ", " + keyPair.d + ")");

        while (true) {
            System.out.println("\n1. Encrypt\n2. Decrypt\n3. Exit\nChoose: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    System.out.print("Enter message to encrypt: ");
                    String message = scanner.nextLine();
                    String encrypted = encrypt(message, keyPair.e, keyPair.n);
                    System.out.println("Encrypted (Base64): " + encrypted);
                    break;

                case "2":
                    System.out.print("Enter Base64 encrypted message: ");
                    String encryptedInput = scanner.nextLine();
                    try {
                        String decrypted = decrypt(encryptedInput, keyPair.d, keyPair.n);
                        System.out.println("Decrypted message: " + decrypted);
                    } catch (Exception ex) {
                        System.out.println("Decryption failed. Invalid input.");
                    }
                    break;

                case "3":
                    System.out.println("Exiting.");
                    return;

                default:
                    System.out.println("Invalid option.");
            }
        }
    }

    // Inner class for RSA Key Pair
    static class RSAKeyPair {
        int n, e, d;
        public RSAKeyPair(int n, int e, int d) {
            this.n = n;
            this.e = e;
            this.d = d;
        }
    }
}
