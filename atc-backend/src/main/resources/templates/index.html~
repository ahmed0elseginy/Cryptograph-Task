<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Encryption System</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            /* Color Palette */
            --primary-color: #1a2a3a;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --light-color: #ecf0f1;
            --dark-color: #2c3e50;
            --success-color: #27ae60;
            --warning-color: #f39c12;
            --info-color: #2980b9;
            --card-bg: rgba(26, 42, 58, 0.85);

            /* Spacing */
            --spacing-xs: 0.5rem;
            --spacing-sm: 1rem;
            --spacing-md: 1.5rem;
            --spacing-lg: 2rem;
            --spacing-xl: 3rem;

            /* Typography */
            --font-size-base: 1rem;
            --font-size-lg: 1.25rem;
            --font-size-xl: 1.5rem;
            --font-size-xxl: 2rem;

            /* Effects */
            --transition-base: all 0.3s ease;
            --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.1);
            --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.2);
            --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.3);
            --blur-amount: 10px;
        }

        /* Base Styles */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            color: var(--light-color);
            line-height: 1.6;
            min-height: 100vh;
            overflow-x: hidden;
            background:
                    linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)),
                    url('image/img_1.png') no-repeat center center fixed;
            background-size: cover;
        }

        .main-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: var(--spacing-xl) var(--spacing-md);
        }

        /* Header Styles */
        .header {
            text-align: center;
            margin-bottom: var(--spacing-xl);
            position: relative;
            animation: fadeIn 1s ease-out;
        }

        .logo-inside {
            width: 265px;
            height: 120px;
            margin-bottom: var(--spacing-lg);
            filter: drop-shadow(0 0 15px rgba(52, 152, 219, 0.6));
            animation: pulse 2s infinite alternate;
        }

        .title {
            font-size: clamp(2rem, 5vw, 3rem);
            font-weight: 700;
            margin-bottom: var(--spacing-sm);
            background: linear-gradient(135deg, var(--secondary-color), var(--success-color));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: var(--shadow-sm);
        }

        .subtitle {
            font-size: clamp(1rem, 2vw, 1.3rem);
            color: rgba(255, 255, 255, 0.9);
            margin: 0 auto var(--spacing-lg);
            max-width: 700px;
            line-height: 1.8;
        }

        /* Tab Navigation */
        .algorithm-tabs {
            display: flex;
            justify-content: center;
            margin-bottom: var(--spacing-lg);
            flex-wrap: wrap;
            gap: var(--spacing-sm);
        }

        .tab-btn {
            padding: var(--spacing-sm) var(--spacing-md);
            background: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 50px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition-base);
            font-size: var(--font-size-base);
            display: flex;
            align-items: center;
            gap: var(--spacing-xs);
            backdrop-filter: blur(var(--blur-amount));
        }

        .tab-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }

        .tab-btn.active {
            background: linear-gradient(135deg, var(--secondary-color), var(--info-color));
            box-shadow: 0 4px 15px rgba(52, 152, 219, 0.4);
        }

        /* Mode Switcher */
        .mode-switcher {
            display: flex;
            margin-bottom: var(--spacing-lg);
            border-radius: 50px;
            background: rgba(255, 255, 255, 0.1);
            padding: var(--spacing-xs);
            backdrop-filter: blur(var(--blur-amount));
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .mode-btn {
            flex: 1;
            padding: var(--spacing-sm) var(--spacing-md);
            background: transparent;
            border: none;
            color: rgba(255, 255, 255, 0.7);
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition-base);
            font-size: var(--font-size-base);
            border-radius: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: var(--spacing-xs);
        }

        .mode-btn:hover {
            color: white;
            background: rgba(255, 255, 255, 0.1);
        }

        .mode-btn.active {
            background: linear-gradient(135deg, var(--secondary-color), var(--info-color));
            color: white;
            box-shadow: var(--shadow-sm);
        }

        /* Tab Content */
        .tab-content {
            display: none;
            animation: fadeIn 0.5s ease-out;
        }

        .tab-content.active {
            display: block;
        }

        /* Algorithm Cards */
        .algorithm-card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: var(--spacing-xl);
            box-shadow: var(--shadow-lg);
            border: 1px solid rgba(255, 255, 255, 0.1);
            max-width: 900px;
            margin: 0 auto;
            backdrop-filter: blur(var(--blur-amount));
            position: relative;
            overflow: hidden;
            animation: slideUp 0.5s ease-out forwards;
        }

        .algorithm-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, var(--secondary-color), var(--info-color));
        }

        .algorithm-header {
            display: flex;
            align-items: flex-start;
            margin-bottom: var(--spacing-lg);
            gap: var(--spacing-md);
        }

        .algorithm-icon {
            font-size: var(--font-size-xxl);
            color: var(--secondary-color);
            flex-shrink: 0;
        }

        .algorithm-title {
            font-size: var(--font-size-xxl);
            font-weight: 700;
            margin-bottom: var(--spacing-sm);
            color: var(--light-color);
        }

        .algorithm-desc {
            font-size: var(--font-size-base);
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: var(--spacing-lg);
            line-height: 1.8;
        }

        /* Form Elements */
        .input-section {
            margin-bottom: var(--spacing-lg);
        }

        label {
            display: block;
            font-weight: 600;
            margin-bottom: var(--spacing-sm);
            font-size: var(--font-size-lg);
            color: var(--light-color);
        }

        input[type="text"] {
            width: 100%;
            padding: var(--spacing-md) var(--spacing-lg);
            font-size: var(--font-size-base);
            border-radius: 10px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            background-color: rgba(0, 0, 0, 0.3);
            color: var(--light-color);
            transition: var(--transition-base);
        }

        input[type="text"]:focus {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 4px rgba(52, 152, 219, 0.3);
            outline: none;
            background-color: rgba(0, 0, 0, 0.4);
        }

        /* Key Display */
        .key-box {
            background-color: rgba(0, 0, 0, 0.4);
            border-left: 4px solid var(--warning-color);
            padding: var(--spacing-md);
            border-radius: 10px;
            margin-bottom: var(--spacing-lg);
            font-size: var(--font-size-base);
            color: var(--light-color);
            position: relative;
        }

        .key-pair {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-xs);
            margin-bottom: var(--spacing-sm);
        }

        .key-pair:last-child {
            margin-bottom: 0;
        }

        .key-label {
            font-weight: 600;
            color: var(--warning-color);
            font-size: var(--font-size-base);
        }

        .key-value {
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            color: var(--secondary-color);
            background-color: rgba(0, 0, 0, 0.2);
            padding: var(--spacing-sm);
            border-radius: 5px;
            word-break: break-all;
            white-space: pre-wrap;
        }

        /* Output Display */
        .output-box {
            background-color: rgba(0, 0, 0, 0.4);
            padding: var(--spacing-lg);
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            margin: var(--spacing-lg) 0;
            color: var(--light-color);
            border: 1px solid rgba(255, 255, 255, 0.1);
            word-break: break-all;
            position: relative;
            min-height: 80px;
            font-size: var(--font-size-base);
        }

        .output-box::before {
            content: 'Result';
            position: absolute;
            top: -12px;
            left: 20px;
            background-color: var(--primary-color);
            padding: 0 var(--spacing-md);
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            font-weight: 600;
        }

        /* Buttons */
        button {
            background: linear-gradient(135deg, var(--secondary-color), var(--info-color));
            color: white;
            border: none;
            padding: var(--spacing-md) var(--spacing-lg);
            font-weight: 600;
            border-radius: 10px;
            cursor: pointer;
            transition: var(--transition-base);
            width: 100%;
            font-size: var(--font-size-lg);
            margin-top: var(--spacing-md);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: var(--spacing-sm);
            box-shadow: var(--shadow-md);
        }

        button:hover {
            background: linear-gradient(135deg, #2980b9, #3498db);
            transform: translateY(-3px);
            box-shadow: var(--shadow-lg);
        }

        button:active {
            transform: translateY(0);
        }

        .button-group {
            display: flex;
            gap: var(--spacing-sm);
            margin: var(--spacing-lg) 0;
        }

        .button-group button {
            flex: 1;
            margin: 0;
        }

        /* Animations */
        @keyframes pulse {
            from { transform: scale(1); }
            to { transform: scale(1.05); }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .main-container {
                padding: var(--spacing-lg) var(--spacing-sm);
            }

            .algorithm-card {
                padding: var(--spacing-md);
            }

            .algorithm-header {
                flex-direction: column;
                align-items: center;
                text-align: center;
            }

            .algorithm-icon {
                margin-bottom: var(--spacing-sm);
            }

            .button-group {
                flex-direction: column;
            }
        }

        /* Loading State */
        .loading {
            position: relative;
            pointer-events: none;
            opacity: 0.8;
        }

        .loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.3);
            border-radius: inherit;
        }

        /* Copy to Clipboard Button */
        .copy-btn {
            position: absolute;
            top: var(--spacing-sm);
            right: var(--spacing-sm);
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition-base);
        }

        .copy-btn:hover {
            background: var(--secondary-color);
        }

        /* Verification Result */
        .verification-success {
            color: var(--success-color);
            font-weight: 600;
        }

        .verification-failure {
            color: var(--accent-color);
            font-weight: 600;
        }


        /* Basic styles if CSS file fails to load */
        .loading {
            opacity: 0.7;
            cursor: not-allowed;
        }
        .copy-btn {
            background: none;
            border: none;
            color: #666;
            cursor: pointer;
            margin-left: 8px;
        }
        .copy-btn:hover {
            color: #333;
        }
        .verification-success {
            color: green;
        }
        .verification-failure {
            color: red;
        }
        .key-value {
            word-break: break-all;
        }
    </style>
</head>
<body>
<div class="main-container">
    <!-- Header Section -->
    <div class="header">
        <img src="image/img.png" alt="Encryption Logo" class="logo-inside">
        <h1 class="title">Advanced Encryption System</h1>
        <p class="subtitle">A comprehensive tool for data encryption using modern security algorithms with LCG key generation</p>
        <p class="subtitle">Supervised by Dr. Abeer Hassan</p>
    </div>

    <!-- Algorithm Tabs -->
    <div class="algorithm-tabs">
        <button class="tab-btn active" onclick="openAlgorithm('cbc')">
            <i class="fas fa-link"></i> CBC
        </button>
        <button class="tab-btn" onclick="openAlgorithm('rsa')">
            <i class="fas fa-key"></i> RSA
        </button>
        <button class="tab-btn" onclick="openAlgorithm('rsa-generator')">
            <i class="fas fa-key"></i> RSA Generator
        </button>
        <button class="tab-btn" onclick="openAlgorithm('sha1')">
            <i class="fas fa-fingerprint"></i> SHA-1
        </button>
    </div>

    <!-- CBC Algorithm Panel -->
    <div id="cbc-panel" class="algorithm-card fade-in">
        <div class="algorithm-header">
            <i class="fas fa-link algorithm-icon"></i>
            <div>
                <h3 class="algorithm-title">CBC (Cipher Block Chaining)</h3>
                <p class="algorithm-desc">
                    A block cipher mode that provides confidentiality by XORing each plaintext block with the previous ciphertext block before encryption.
                    Uses an Initialization Vector (IV) for the first block. The LCG generator provides the encryption key for enhanced security.
                </p>
            </div>
        </div>

        <div class="mode-switcher">
            <button class="mode-btn active" onclick="switchMode('cbc', 'encrypt')">Encrypt</button>
            <button class="mode-btn" onclick="switchMode('cbc', 'decrypt')">Decrypt</button>
        </div>

        <!-- CBC Encrypt Panel -->
        <div id="cbc-encrypt-panel" class="tab-content active">
            <div class="input-section">
                <label for="cbc-inputText">Text to encrypt:</label>
                <input type="text" id="cbc-inputText" placeholder="Enter the text you want to encrypt with CBC..." required>
            </div>

            <div class="key-box">
                <span class="key-label">Encryption Key (Generated by LCG):</span>
                <span id="cbc-key">No key generated yet</span><br>
            </div>

            <button onclick="encryptCBC()">
                <i class="fas fa-lock"></i> Encrypt with CBC
            </button>

            <div class="output-box" id="cbc-encrypt-output">Encryption result will appear here</div>
        </div>

        <!-- CBC Decrypt Panel -->
        <div id="cbc-decrypt-panel" class="tab-content">
            <div class="input-section">
                <label for="cbc-inputCipher">Cipher to decrypt:</label>
                <input type="text" id="cbc-inputCipher" placeholder="Enter the cipher text you want to decrypt..." required>
            </div>

            <div class="input-section">
                <label for="cbc-inputKey">Decryption Key:</label>
                <input type="text" id="cbc-inputKey" placeholder="Enter the decryption key..." required>
            </div>

            <button onclick="decryptCBC()">
                <i class="fas fa-unlock"></i> Decrypt with CBC
            </button>

            <div class="output-box" id="cbc-decrypt-output">Decryption result will appear here</div>
        </div>
    </div>

    <!-- RSA Algorithm Panel -->
    <div id="rsa-panel" class="algorithm-card" style="display: none;">
        <div class="algorithm-header">
            <i class="fas fa-key algorithm-icon"></i>
            <div>
                <h3 class="algorithm-title">RSA (Asymmetric Encryption)</h3>
                <p class="algorithm-desc">
                    A public-key cryptosystem that uses two mathematically linked keys for secure data transmission.
                    The LCG generator helps create the initial prime numbers used in key generation. RSA provides both encryption and digital signature capabilities.
                </p>
            </div>
        </div>

        <div class="mode-switcher">
            <button class="mode-btn active" onclick="switchMode('rsa', 'encrypt')">Encrypt</button>
            <button class="mode-btn" onclick="switchMode('rsa', 'decrypt')">Decrypt</button>
        </div>

        <!-- RSA Encrypt Panel -->
        <div id="rsa-encrypt-panel" class="tab-content active">
            <div class="input-section">
                <label for="rsa-inputText">Text to encrypt:</label>
                <input type="text" id="rsa-inputText" placeholder="Enter the text you want to encrypt with RSA..." required>
            </div>

            <div class="key-box">
                <div class="key-pair">
                    <span class="key-label">Public Key:</span>
                    <span id="rsa-public-key" class="key-value">Not available yet</span>
                </div>
                <div class="key-pair">
                    <span class="key-label">Private Key:</span>
                    <span id="rsa-private-key" class="key-value">Hidden for security reasons</span>
                </div>
            </div>

            <button onclick="encryptRSA()">
                <i class="fas fa-user-lock"></i> Encrypt with RSA
            </button>

            <div class="output-box" id="rsa-encrypt-output">Encryption result will appear here</div>
        </div>

        <!-- RSA Decrypt Panel -->
        <div id="rsa-decrypt-panel" class="tab-content">
            <div class="input-section">
                <label for="rsa-inputCipher">Cipher to decrypt:</label>
                <input type="text" id="rsa-inputCipher" placeholder="Enter the cipher text you want to decrypt..." required>
            </div>

            <div class="input-section">
                <label for="rsa-inputPrivateKey">Private Key:</label>
                <input type="text" id="rsa-inputPrivateKey"  class="key-value" placeholder="Enter your private key..." required>
            </div>

            <button onclick="decryptRSA()">
                <i class="fas fa-user-unlock"></i> Decrypt with RSA
            </button>

            <div class="output-box" id="rsa-decrypt-output">Decryption result will appear here</div>
        </div>
    </div>

    <!-- RSA Generator Panel -->
    <div id="rsa-generator-panel" class="algorithm-card" style="display: none;">
        <div class="algorithm-header">
            <i class="fas fa-key algorithm-icon"></i>
            <div>
                <h3 class="algorithm-title">RSA Generator (Asymmetric Encryption)</h3>
                <p class="algorithm-desc">
                    A public-key cryptosystem that uses two mathematically linked keys for secure data transmission.
                    The LCG generator helps create the initial prime numbers used in key generation. RSA provides both encryption and digital signature capabilities.
                </p>
            </div>
        </div>

        <div class="mode-switcher">
            <button class="mode-btn active" onclick="switchMode('rsa-generator', 'encrypt')">Encrypt</button>
            <button class="mode-btn" onclick="switchMode('rsa-generator', 'decrypt')">Decrypt</button>
        </div>

        <!-- RSA Generator Encrypt Panel -->
        <div id="rsa-generator-encrypt-panel" class="tab-content active">
            <div class="input-section">
                <label for="rsa-generator-inputText">Text to encrypt:</label>
                <input type="text" id="rsa-generator-inputText" placeholder="Enter the text you want to encrypt with RSA..." required>
            </div>

            <div class="key-box">
                <div class="key-pair">
                    <span class="key-label">Public Key:</span>
                    <span id="rsa-generator-public-key" class="key-value">Not available yet</span>
                </div>
                <div class="key-pair">
                    <span class="key-label">Private Key:</span>
                    <span id="rsa-generator-private-key" class="key-value">Hidden for security reasons</span>
                </div>
            </div>

            <button onclick="encryptRSAGenerator()">
                <i class="fas fa-user-lock"></i> Encrypt with RSA
            </button>

            <div class="output-box" id="rsa-generator-encrypt-output">Encryption result will appear here</div>
        </div>

        <!-- RSA Generator Decrypt Panel -->
        <div id="rsa-generator-decrypt-panel" class="tab-content">
            <div class="input-section">
                <label for="rsa-generator-inputCipher">Cipher to decrypt:</label>
                <input type="text" id="rsa-generator-inputCipher" placeholder="Enter the cipher text you want to decrypt..." required>
            </div>

            <div class="input-section">
                <label for="rsa-generator-inputPrivateKey">Private Key:</label>
                <input type="text" id="rsa-generator-inputPrivateKey" placeholder="Enter your private key..." required>
            </div>

            <button onclick="decryptRSAGenerator()">
                <i class="fas fa-user-unlock"></i> Decrypt with RSA
            </button>

            <div class="output-box" id="rsa-generator-decrypt-output">Decryption result will appear here</div>
        </div>
    </div>

    <!-- SHA-1 Algorithm Panel -->
    <div id="sha1-panel" class="algorithm-card" style="display: none;">
        <div class="algorithm-header">
            <i class="fas fa-fingerprint algorithm-icon"></i>
            <div>
                <h3 class="algorithm-title">SHA-1 (Secure Hash Algorithm)</h3>
                <p class="algorithm-desc">
                    A cryptographic hash function that produces a 160-bit (20-byte) hash value known as a message digest.
                    While no longer considered secure against well-funded attackers, it's still useful for checksums and data integrity verification.
                    The LCG generator may be used to create salt values when needed.
                </p>
            </div>
        </div>

        <div class="mode-switcher">
            <button class="mode-btn active" onclick="switchMode('sha1', 'hash')">Generate Hash</button>
            <button class="mode-btn" onclick="switchMode('sha1', 'verify')">Verify Hash</button>
        </div>

        <!-- SHA-1 Hash Panel -->
        <div id="sha1-hash-panel" class="tab-content active">
            <div class="input-section">
                <label for="sha1-inputText">Text to hash:</label>
                <input type="text" id="sha1-inputText" placeholder="Enter the text you want to hash with SHA-1..." required>
            </div>

            <button onclick="hashSHA1()">
                <i class="fas fa-hashtag"></i> Generate SHA-1 Hash
            </button>

            <div class="output-box" id="sha1-hash-output">Hash result will appear here</div>
        </div>

        <!-- SHA-1 Verify Panel -->
        <div id="sha1-verify-panel" class="tab-content">
            <div class="input-section">
                <label for="sha1-verify-inputText">Original Text:</label>
                <input type="text" id="sha1-verify-inputText" placeholder="Enter the original text..." required>
            </div>

            <div class="input-section">
                <label for="sha1-verify-inputHash">Hash to verify:</label>
                <input type="text" id="sha1-verify-inputHash" placeholder="Enter the hash to verify..." required>
            </div>

            <button onclick="verifySHA1()">
                <i class="fas fa-check-circle"></i> Verify Hash
            </button>

            <div class="output-box" id="sha1-verify-output">Verification result will appear here</div>
        </div>
    </div>
</div>

</body>
</html>